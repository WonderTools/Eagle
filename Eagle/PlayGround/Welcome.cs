// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Eagle;
//
//    var welcome = Welcome.FromJson(jsonString);

using NUnit.Framework;

namespace PlayGround
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;


    public class RootObject
    {
        [JsonProperty("test-run")]
        public TestRun TestRun { get; set; }
    }

    public class TestRun
    {
        [JsonProperty("test-suite")]
        public NUnitTestSuite NUnitTestSuite { get; set; }
    }

    public class NUnitTestSuite
    {

        [JsonProperty("@name")]
        public string Name { get; set; }

        [JsonProperty("@fullname")]
        public string Fullname { get; set; }

        [JsonConverter(typeof(MyConverter<NUnitTestSuite>))]
        [JsonProperty("test-suite", NullValueHandling = NullValueHandling.Ignore)]
        public List<NUnitTestSuite> TestSuites { get; set; }

        [JsonConverter(typeof(MyConverter<NUnitTestCase>))]
        [JsonProperty("test-case", NullValueHandling = NullValueHandling.Ignore)]
        public List<NUnitTestCase> TestCases { get; set; }
    }


    public class NUnitTestCase
    {
        [JsonProperty("@name")]
        public string Name { get; set; }

        [JsonProperty("@fullname")]
        public string Fullname { get; set; }
    }


    public class MyConverter<T> : JsonConverter
    {
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.StartArray)
            {
                return serializer.Deserialize(reader, objectType);
            }
            var result = (T) serializer.Deserialize(reader, typeof(T));
            return new List<T> {result};
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new NotImplementedException();
        }
    }


}